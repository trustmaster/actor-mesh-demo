[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "actor-mesh-demo"
version = "1.0.0"
description = "Actor Mesh Demo - E-commerce Support Agent with intelligent routing and processing"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Actor Mesh Demo Team", email = "demo@actormesh.com"},
]
keywords = ["actor-mesh", "microservices", "nats", "ecommerce", "support", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Communications :: Chat",
    "Topic :: Office/Business :: Financial :: Point-Of-Sale",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "nats-py>=2.6.0",
    "redis>=5.0.0",
    "aiosqlite>=0.19.0",
    "litellm>=1.17.0",
    "pydantic>=2.8.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    "colorama>=0.4.6",
    "transformers>=4.21.0",
    "torch>=1.12.0",
    "tokenizers>=0.22.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/actormesh/actor-mesh-demo"
Documentation = "https://github.com/actormesh/actor-mesh-demo/blob/main/README.md"
Repository = "https://github.com/actormesh/actor-mesh-demo.git"
Issues = "https://github.com/actormesh/actor-mesh-demo/issues"

[project.scripts]
ecommerce-support = "api.gateway:main"
actor-demo = "demo:main"

[tool.setuptools.packages.find]
include = ["actors*", "api*", "models*", "mock_services*"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.css", "*.js", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "nats.*",
    "litellm.*",
    "transformers.*",
    "torch.*",
    "tokenizers.*",
    "httpx.*",
    "aiohttp.*",
    "redis.*",
    "aiosqlite.*",
    "passlib.*",
    "jose.*",
    "colorama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["actors", "api", "models", "mock_services"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
