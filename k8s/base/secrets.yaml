apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: actor-mesh
  labels:
    app: actor-mesh-demo
    component: secrets
    version: v1.0.0
type: Opaque
data:
  # LLM API Keys (base64 encoded)
  # To encode: echo -n "your-api-key" | base64
  # OPENAI_API_KEY: <base64-encoded-openai-key>
  # ANTHROPIC_API_KEY: <base64-encoded-anthropic-key>
  # AZURE_API_KEY: <base64-encoded-azure-key>
  # GOOGLE_API_KEY: <base64-encoded-google-key>

  # Database credentials (if needed)
  # DB_PASSWORD: <base64-encoded-password>

  # JWT Secret for API authentication
  JWT_SECRET: YWN0b3ItbWVzaC1kZW1vLWp3dC1zZWNyZXQtcGxlYXNlLWNoYW5nZS1pbi1wcm9kdWN0aW9u

  # API Keys for external services
  # WEBHOOK_SECRET: <base64-encoded-webhook-secret>
  # MONITORING_API_KEY: <base64-encoded-monitoring-key>
stringData:
  # Example of non-encoded secrets (Kubernetes will base64 encode these automatically)
  # Uncomment and set these values in production

  # OpenAI API Key
  # OPENAI_API_KEY: "sk-your-openai-api-key-here"

  # Anthropic API Key
  # ANTHROPIC_API_KEY: "your-anthropic-api-key-here"

  # Azure OpenAI Configuration
  # AZURE_API_KEY: "your-azure-api-key-here"
  # AZURE_API_BASE: "https://your-resource.openai.azure.com/"
  # AZURE_API_VERSION: "2023-12-01-preview"

  # Google/Vertex AI Configuration
  # GOOGLE_API_KEY: "your-google-api-key-here"
  # GOOGLE_APPLICATION_CREDENTIALS: "/path/to/service-account.json"

  # Database Connection Strings (if using external databases)
  # DATABASE_URL: "postgresql://user:password@host:port/database"
  # REDIS_PASSWORD: "your-redis-password"

  # External Service API Keys
  # SENDGRID_API_KEY: "your-sendgrid-key-for-notifications"
  # SLACK_WEBHOOK_URL: "https://hooks.slack.com/your-webhook-url"
  # DATADOG_API_KEY: "your-datadog-api-key"

  # Security Configuration
  # ENCRYPTION_KEY: "your-32-character-encryption-key-here"
  # SESSION_SECRET: "your-session-secret-key-here"
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: actor-mesh
  labels:
    app: actor-mesh-demo
    component: tls
    version: v1.0.0
type: kubernetes.io/tls
data:
  # TLS Certificate and Key (base64 encoded)
  # Generate with:
  # kubectl create secret tls tls-secret --cert=path/to/tls.crt --key=path/to/tls.key --dry-run=client -o yaml
  #
  # For development, you can generate self-signed certificates:
  # openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=actor-mesh.local"
  #
  # Then base64 encode:
  # cat tls.crt | base64 -w 0
  # cat tls.key | base64 -w 0

  # tls.crt: <base64-encoded-certificate>
  # tls.key: <base64-encoded-private-key>
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: actor-mesh
  labels:
    app: actor-mesh-demo
    component: registry
    version: v1.0.0
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials (base64 encoded)
  # Generate with:
  # kubectl create secret docker-registry registry-secret \
  #   --docker-server=your-registry-server \
  #   --docker-username=your-username \
  #   --docker-password=your-password \
  #   --docker-email=your-email \
  #   --dry-run=client -o yaml

  # .dockerconfigjson: <base64-encoded-docker-config>
