apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: actor-mesh-ingress
  namespace: actor-mesh
  labels:
    app: actor-mesh-demo
    component: ingress
    version: v1.0.0
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"

    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-rps: "50"

    # CORS support
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization, X-Requested-With"

    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

    # Load balancer annotations (for cloud providers)
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/azure-load-balancer-resource-group: "actor-mesh-rg"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - actor-mesh.local
        - api.actor-mesh.local
        - chat.actor-mesh.local
      secretName: tls-secret
  rules:
    # Main application domain
    - host: actor-mesh.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80
          - path: /ws
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80
          - path: /widget
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80
          - path: /docs
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80
          - path: /health
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80

    # API subdomain
    - host: api.actor-mesh.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80

    # Chat widget subdomain
    - host: chat.actor-mesh.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mock-services-ingress
  namespace: actor-mesh
  labels:
    app: actor-mesh-demo
    component: mock-services-ingress
    version: v1.0.0
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"

    # Internal access only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  ingressClassName: nginx
  rules:
    # Mock services for internal/development access
    - host: mock.actor-mesh.local
      http:
        paths:
          - path: /customers
            pathType: Prefix
            backend:
              service:
                name: customer-api
                port:
                  number: 8001
          - path: /orders
            pathType: Prefix
            backend:
              service:
                name: orders-api
                port:
                  number: 8002
          - path: /tracking
            pathType: Prefix
            backend:
              service:
                name: tracking-api
                port:
                  number: 8003
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: actor-mesh
  labels:
    app: actor-mesh-demo
    component: monitoring-ingress
    version: v1.0.0
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"

    # Authentication for monitoring endpoints
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Monitoring"

    # Internal access only
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  ingressClassName: nginx
  rules:
    # Monitoring and observability endpoints
    - host: monitoring.actor-mesh.local
      http:
        paths:
          - path: /nats
            pathType: Prefix
            backend:
              service:
                name: nats
                port:
                  number: 8222
